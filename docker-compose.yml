services:
  openresty:
    container_name: openresty
    image: openresty/openresty:$OPENRESTY_VERSION
    network_mode: host
    hostname: $HOSTNAME
    volumes:
      - ./conf/openresty/conf.d:/etc/nginx/conf.d
      - /tmp:/tmp
  redis:
    container_name: redis
    image: redis:$REDIS_VERSION
    network_mode: host
    hostname: $HOSTNAME
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    volumes:
      - redis_data:/data
  kafka:
    container_name: kafka
    image: bitnami/kafka:$KAFKA_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CLIENT_LISTENER_NAME: CLIENT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: CLIENT
      KAFKA_CFG_LISTENERS: CLIENT://:9092,CONTROLLER://:9093
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@localhost:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,CLIENT:PLAINTEXT
      #KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,CLIENT:SASL_PLAINTEXT
      #KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL: SCRAM-SHA-512
      #KAFKA_CFG_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512
      #KAFKA_CLIENT_USERS: root
      #KAFKA_CLIENT_PASSWORDS: $PASSWORD
      JMX_PORT: 9527
    volumes:
      - kafka_data:/bitnami/kafka/data
  mariadb:
    container_name: mariadb
    image: mariadb:$MARIADB_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      MARIADB_ROOT_PASSWORD: $PASSWORD
      TZ: Asia/Shanghai
    volumes:
      - ./conf/mysql/conf.d/mariadbd.cnf:/etc/mysql/conf.d/mariadbd.cnf
      - ./conf/mysql/initdb:/docker-entrypoint-initdb.d
      - mariadb_data:/var/lib/mysql
      - mariadb_log:/var/log/mysql
  mysql:
    container_name: mysql
    image: mysql:$MYSQL_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      MYSQL_ROOT_PASSWORD: $PASSWORD
      TZ: Asia/Shanghai
    volumes:
      - ./conf/mysql/conf.d/mysqld.cnf:/etc/mysql/conf.d/mysqld.cnf
      - ./conf/mysql/initdb:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
      - mysql_log:/var/log/mysql
  grafana:
    container_name: grafana
    image: grafana/grafana:$GRAFANA_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      GF_DATABASE_TYPE: sqlite3
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: $PASSWORD
    volumes:
      - grafana_data:/var/lib/grafana
  es:
    container_name: es
    image: elasticsearch:$ES_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      node.name: es
      cluster.name: docker-es
      bootstrap.memory_lock: true
      network.host: 0.0.0.0
      http.port: 9200
      discovery.type: single-node
      node.roles: master,data,remote_cluster_client,ingest
      transport.compress: true
      transport.port: 9300
      xpack.monitoring.collection.enabled: true
      xpack.monitoring.elasticsearch.collection.enabled: true
      http.cors.enabled: true
      http.cors.allow-origin: '"*"'
      xpack.security.transport.ssl.enabled: false
      xpack.security.http.ssl.enabled: false
      xpack.security.enabled: false
      ES_JAVA_OPTS: -Xms1g -Xmx1g -Xlog:disable
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
  kibana:
    container_name: kibana
    image: bitnami/kibana:$KIBANA_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      KIBANA_ELASTICSEARCH_URL: http://localhost:9200
      KIBANA_ELASTICSEARCH_PORT_NUMBER: 9200
      KIBANA_NEWSFEED_ENABLED: false
    volumes:
      - kibana_data:/bitnami/kibana
  esvue:
    container_name: esvue
    image: cars10/elasticvue:$ELASTICVUE_VERSION
    network_mode: host
    hostname: $HOSTNAME
    volumes:
      - ./conf/openresty/esvue.conf:/etc/nginx/nginx.conf
  zk:
    container_name: zk
    image: zookeeper:$ZK_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      ZOO_TICK_TIME: 2000
      ZOO_INIT_LIMIT: 5
      ZOO_SYNC_LIMIT: 2
      ZOO_MAX_CLIENT_CNXNS: 60
      ZOO_STANDALONE_ENABLED: true
      ZOO_ADMINSERVER_ENABLED: true
      ZOO_AUTOPURGE_PURGEINTERVAL: 0
      ZOO_AUTOPURGE_SNAPRETAINCOUNT: 3
      ZOO_4LW_COMMANDS_WHITELIST: srvr
      ZOO_CFG_EXTRA: "admin.serverPort=8082"
      JVMFLAGS: ""
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=localhost:2888:3888;2181
    volumes:
      - zk_data:/data
      - zk_log:/datalog
      - zk_log:/logs
  torna:
    container_name: torna
    image: registry.cn-hangzhou.aliyuncs.com/tanghc/torna:$TORNA_VERSION
    network_mode: host
    hostname: $HOSTNAME
    entrypoint:
      - sh
      - -c
      - "java -server -Xmx512m -Xms512m -Djava.awt.headless=true -Duser.timezone=Asia/Shanghai -Djava.security.egd=file:/dev/./urandom -jar /torna/torna.jar --server.port=7700 --mysql.host=localhost:3306 --mysql-schema=torna --mysql.username=root --mysql.password='$PASSWORD'"
    depends_on:
      mariadb:
        required: true
        condition: service_started
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - torna_tmp:/tmp
  httpbin:
    container_name: httpbin
    image: mccutchen/go-httpbin:$HTTPBIN_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      PORT: 8085
  apollo:
    container_name: apollo-portal
    image: apolloconfig/apollo-portal:$APOLLO_VERSION
    network_mode: host
    hostname: $HOSTNAME
    depends_on:
      apollo-config:
        required: true
        condition: service_started
      apollo-admin:
        required: true
        condition: service_started
      mariadb:
        required: true
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: "$PASSWORD"
      APOLLO_PORTAL_ENVS: dev
      DEV_META: http://localhost:8080
  apollo-config:
    container_name: apollo-config
    image: apolloconfig/apollo-configservice:$APOLLO_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: "$PASSWORD"
  apollo-admin:
    container_name: apollo-admin
    image: apolloconfig/apollo-adminservice:$APOLLO_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: "$PASSWORD"
  rustdesk-server:
    container_name: rustdesk-server
    image: rustdesk/rustdesk-server-s6:latest
    network_mode: host
    hostname: $HOSTNAME
    environment:
      RELAY: 127.0.0.1:21116
      ENCRYPTED_ONLY: 1
      DB_URL: /data/db_v2.sqlite3
      KEY_PUB: ""
      KEY_PRIV: ""
    volumes:
      - rustdesk_data:/data
  clickhouse:
    container_name: clickhouse
    image: bitnami/clickhouse:$CLICKHOUSE_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      CLICKHOUSE_ADMIN_USER: admin
      CLICKHOUSE_ADMIN_PASSWORD: $PASSWORD
    volumes:
      - clickhouse_data:/bitnami/clickhouse
      - clickhouse_log:/opt/bitnami/clickhouse/logs
  dubbo-admin:
    container_name: dubbo-admin
    image: apache/dubbo-admin:$DUBBO_ADMIN_VERSION
    network_mode: host
    hostname: $HOSTNAME
    depends_on:
      zk:
        required: true
        condition: service_started
    environment:
      admin.registry.address: zookeeper://localhost:2181
      admin.config-center: zookeeper://localhost:2181
      admin.metadata-report.address: zookeeper://localhost:2181
  kafka-ui:
    container_name: kafka-ui
    image: kafbat/kafka-ui:$KAFKA_UI_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      SERVER_PORT: 8081
  dfly:
    container_name: dfly
    image: docker.dragonflydb.io/dragonflydb/dragonfly:$DRAGONFLYDB_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      DFLY_port: 6378
    volumes:
      - dfly_data:/data
  minio:
    container_name: minio
    image: bitnami/minio:$MINIO_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      MINIO_API_PORT_NUMBER: 9100
      MINIO_CONSOLE_PORT_NUMBER: 9101
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: $PASSWORD
      MINIO_SKIP_CLIENT: yes
    volumes:
      - minio_data:/bitnami/minio/data
      - minio_cert:/certs
  nacos:
    container_name: nacos
    image: nacos/nacos-server:$NACOS_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      MODE: standalone
  influxdb:
    container_name: influxdb
    image: influxdb:$INFLUXDB_VERSION
    network_mode: host
    hostname: $HOSTNAME
    volumes:
      - influxdb_data:/var/lib/influxdb
  busybox:
    container_name: busybox
    image: busybox:$BUSYBOX_VERSION
    network_mode: host
    hostname: $HOSTNAME
    command:
      - sleep
      - infinity
  metersphere:
    container_name: metersphere
    image: metersphere/metersphere-ce-allinone:$METERSPHERE_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      PASSWORD: $PASSWORD
    depends_on:
      mariadb:
        required: true
        condition: service_started
      redis:
        required: true
        condition: service_started
      kafka:
        required: true
        condition: service_started
      minio:
        required: true
        condition: service_started
    volumes:
      - metersphere_data:/opt/metersphere/data
      - ./conf/metersphere:/opt/metersphere/conf
      - metersphere_logs:/opt/metersphere/logs
      - ./conf/metersphere/start-all.sh:/shells/start-all.sh
  tdengine:
    container_name: tdengine
    image: tdengine/tdengine:$TDENGINE_VERSION
    network_mode: host
    hostname: $HOSTNAME
    volumes:
      - tdengine_data:/var/lib/taos
      - tdengine_log:/var/log/taos
      - tdengine_core:/corefile
  ftp:
    container_name: ftp
    image: drakkan/sftpgo:$SFTPGO_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      SFTPGO_FTPD__BINDINGS__0__PORT: 8021
      SFTPGO_HTTPD__BINDINGS__0__PORT: 8089
    volumes:
      - sftpgo_home:/var/lib/sftpgo
      - sftpgo_data:/srv/sftpgo
  sshd:
    container_name: sshd
    image: testcontainers/sshd:$SSHD_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      USERNAME: root
      PASSWORD: $PASSWORD
    entrypoint: sh
    command:
      - -c
      - echo $${USERNAME}:$${PASSWORD} | chpasswd && /usr/sbin/sshd -D -p 8022 -o PermitRootLogin=yes -o AddressFamily=inet -o GatewayPorts=yes -o AllowAgentForwarding=yes -o AllowTcpForwarding=yes -o KexAlgorithms=+diffie-hellman-group1-sha1 -o HostkeyAlgorithms=+ssh-rsa
  redis-insight:
    container_name: redis-insight
    image: redis/redisinsight:$REDIS_INSIGHT_VERSION
    network_mode: host
    hostname: $HOSTNAME
  nats:
    container_name: nats
    image: nats:$NATS_VERSION
    network_mode: host
    hostname: $HOSTNAME
    command:
      - -p
      - "4222"
      - -m
      - "4333"
      - -js
      - -sd
      - /var/lib/nats
      - --user
      - root
      - --pass
      - $PASSWORD
      - --cluster_name
      - local
    volumes:
      - nats_data:/var/lib/nats
  nats-ui:
    container_name: nats-ui
    image: ghcr.io/nats-nui/nui:latest
    network_mode: host
    hostname: $HOSTNAME
    volumes:
      - nats_ui_data:/db
  redpanda:
    container_name: redpanda
    image: redpandadata/redpanda:$REDPANDA_VERSION
    network_mode: host
    hostname: $HOSTNAME
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9192,external://0.0.0.0:19192
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://localhost:9192,external://localhost:19192
      - --pandaproxy-addr internal://0.0.0.0:8182,external://0.0.0.0:18182
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://localhost:8182,external://localhost:18182
      - --schema-registry-addr internal://0.0.0.0:8181,external://0.0.0.0:18181
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr localhost:33145
      - --advertise-rpc-addr localhost:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    volumes:
      - redpanda_data:/var/lib/redpanda/data
  redpanda-console:
    container_name: redpanda-console
    image: redpandadata/console:$REDPANDA_CONSOLE_VERSION
    network_mode: host
    hostname: $HOSTNAME
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        server:
          listenPort: 8280
        kafka:
          brokers: ["localhost:9192"]
        schemaRegistry:
          enabled: true
          urls: ["http://localhost:8181"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://localhost:9644"]
        analytics:
          enabled: false
    depends_on:
      redpanda:
        required: true
        condition: service_started
  pogocache:
    container_name: pogocache
    image: pogocache/pogocache:$POGOCACHE_VERSION
    network_mode: host
    hostname: $HOSTNAME
  dockge:
    container_name: dockge
    image: louislam/dockge:$DOCKGE_VERSION
    network_mode: host
    hostname: $HOSTNAME
    environment:
      DOCKGE_STACKS_DIR: /opt/stacks
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/opt/stacks/docker_dev
      - dockge_data:/app/data
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:$PORTAINER_VERSION
    network_mode: host
    hostname: $HOSTNAME
    entrypoint: sh
    command:
      - -c
      - echo $PASSWORD > /tmp/portainer_password; /portainer --http-enabled --admin-password-file /tmp/portainer_password
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  es_data: {}
  redis_data: {}
  kafka_data: {}
  mysql_data: {}
  mysql_log: {}
  grafana_data: {}
  zk_data: {}
  zk_log: {}
  rustdesk_data: {}
  mariadb_data: {}
  mariadb_log: {}
  clickhouse_data: {}
  clickhouse_log: {}
  dfly_data: {}
  kibana_data: {}
  torna_tmp: {}
  minio_data: {}
  minio_cert: {}
  influxdb_data: {}
  metersphere_data: {}
  metersphere_logs: {}
  tdengine_data: {}
  tdengine_log: {}
  tdengine_core: {}
  sftpgo_data: {}
  sftpgo_home: {}
  nats_data: {}
  nats_ui_data: {}
  redpanda_data: {}
  dockge_data: {}
  portainer_data: {}
